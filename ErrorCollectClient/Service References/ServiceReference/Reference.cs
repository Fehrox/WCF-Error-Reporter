//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ErrorCollectClient.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IErrorCollectService")]
    public interface IErrorCollectService {
        
        // CODEGEN: Generating message contract since the wrapper name (LoggedErrorDTO) of message LoggedErrorDTO does not match the default value (LogError)
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IErrorCollectService/LogError")]
        void LogError(ErrorCollectClient.ServiceReference.LoggedErrorDTO request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IErrorCollectService/LogError")]
        System.IAsyncResult BeginLogError(ErrorCollectClient.ServiceReference.LoggedErrorDTO request, System.AsyncCallback callback, object asyncState);
        
        void EndLogError(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper name (SessionDTO) of message SessionDTO does not match the default value (StartSession)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IErrorCollectService/StartSession", ReplyAction="http://tempuri.org/IErrorCollectService/StartSessionResponse")]
        ErrorCollectClient.ServiceReference.StartedSessionDTO StartSession(ErrorCollectClient.ServiceReference.SessionDTO request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IErrorCollectService/StartSession", ReplyAction="http://tempuri.org/IErrorCollectService/StartSessionResponse")]
        System.IAsyncResult BeginStartSession(ErrorCollectClient.ServiceReference.SessionDTO request, System.AsyncCallback callback, object asyncState);
        
        ErrorCollectClient.ServiceReference.StartedSessionDTO EndStartSession(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoggedErrorDTO", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LoggedErrorDTO {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.Generic.KeyValuePair<string, string>[] Data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string ExceptionType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string HelpLink;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string Message;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int SessionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string Source;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string StackTrace;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public System.DateTime Time;
        
        public LoggedErrorDTO() {
        }
        
        public LoggedErrorDTO(System.Collections.Generic.KeyValuePair<string, string>[] Data, string ExceptionType, string HelpLink, string Message, int SessionId, string Source, string StackTrace, System.DateTime Time) {
            this.Data = Data;
            this.ExceptionType = ExceptionType;
            this.HelpLink = HelpLink;
            this.Message = Message;
            this.SessionId = SessionId;
            this.Source = Source;
            this.StackTrace = StackTrace;
            this.Time = Time;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SessionDTO", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SessionDTO {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string DeviceId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Platform;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string User;
        
        public SessionDTO() {
        }
        
        public SessionDTO(string DeviceId, string Platform, string User) {
            this.DeviceId = DeviceId;
            this.Platform = Platform;
            this.User = User;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StartedSessionDTO", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class StartedSessionDTO {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int SessionId;
        
        public StartedSessionDTO() {
        }
        
        public StartedSessionDTO(int SessionId) {
            this.SessionId = SessionId;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IErrorCollectServiceChannel : ErrorCollectClient.ServiceReference.IErrorCollectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ErrorCollectServiceClient : System.ServiceModel.ClientBase<ErrorCollectClient.ServiceReference.IErrorCollectService>, ErrorCollectClient.ServiceReference.IErrorCollectService {
        
        private BeginOperationDelegate onBeginLogErrorDelegate;
        
        private EndOperationDelegate onEndLogErrorDelegate;
        
        private System.Threading.SendOrPostCallback onLogErrorCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartSessionDelegate;
        
        private EndOperationDelegate onEndStartSessionDelegate;
        
        private System.Threading.SendOrPostCallback onStartSessionCompletedDelegate;
        
        public ErrorCollectServiceClient() {
        }
        
        public ErrorCollectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ErrorCollectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ErrorCollectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ErrorCollectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogErrorCompleted;
        
        public event System.EventHandler<StartSessionCompletedEventArgs> StartSessionCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ErrorCollectClient.ServiceReference.IErrorCollectService.LogError(ErrorCollectClient.ServiceReference.LoggedErrorDTO request) {
            base.Channel.LogError(request);
        }
        
        public void LogError(System.Collections.Generic.KeyValuePair<string, string>[] Data, string ExceptionType, string HelpLink, string Message, int SessionId, string Source, string StackTrace, System.DateTime Time) {
            ErrorCollectClient.ServiceReference.LoggedErrorDTO inValue = new ErrorCollectClient.ServiceReference.LoggedErrorDTO();
            inValue.Data = Data;
            inValue.ExceptionType = ExceptionType;
            inValue.HelpLink = HelpLink;
            inValue.Message = Message;
            inValue.SessionId = SessionId;
            inValue.Source = Source;
            inValue.StackTrace = StackTrace;
            inValue.Time = Time;
            ((ErrorCollectClient.ServiceReference.IErrorCollectService)(this)).LogError(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ErrorCollectClient.ServiceReference.IErrorCollectService.BeginLogError(ErrorCollectClient.ServiceReference.LoggedErrorDTO request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogError(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogError(System.Collections.Generic.KeyValuePair<string, string>[] Data, string ExceptionType, string HelpLink, string Message, int SessionId, string Source, string StackTrace, System.DateTime Time, System.AsyncCallback callback, object asyncState) {
            ErrorCollectClient.ServiceReference.LoggedErrorDTO inValue = new ErrorCollectClient.ServiceReference.LoggedErrorDTO();
            inValue.Data = Data;
            inValue.ExceptionType = ExceptionType;
            inValue.HelpLink = HelpLink;
            inValue.Message = Message;
            inValue.SessionId = SessionId;
            inValue.Source = Source;
            inValue.StackTrace = StackTrace;
            inValue.Time = Time;
            return ((ErrorCollectClient.ServiceReference.IErrorCollectService)(this)).BeginLogError(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogError(System.IAsyncResult result) {
            base.Channel.EndLogError(result);
        }
        
        private System.IAsyncResult OnBeginLogError(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.KeyValuePair<string, string>[] Data = ((System.Collections.Generic.KeyValuePair<string, string>[])(inValues[0]));
            string ExceptionType = ((string)(inValues[1]));
            string HelpLink = ((string)(inValues[2]));
            string Message = ((string)(inValues[3]));
            int SessionId = ((int)(inValues[4]));
            string Source = ((string)(inValues[5]));
            string StackTrace = ((string)(inValues[6]));
            System.DateTime Time = ((System.DateTime)(inValues[7]));
            return this.BeginLogError(Data, ExceptionType, HelpLink, Message, SessionId, Source, StackTrace, Time, callback, asyncState);
        }
        
        private object[] OnEndLogError(System.IAsyncResult result) {
            this.EndLogError(result);
            return null;
        }
        
        private void OnLogErrorCompleted(object state) {
            if ((this.LogErrorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogErrorAsync(System.Collections.Generic.KeyValuePair<string, string>[] Data, string ExceptionType, string HelpLink, string Message, int SessionId, string Source, string StackTrace, System.DateTime Time) {
            this.LogErrorAsync(Data, ExceptionType, HelpLink, Message, SessionId, Source, StackTrace, Time, null);
        }
        
        public void LogErrorAsync(System.Collections.Generic.KeyValuePair<string, string>[] Data, string ExceptionType, string HelpLink, string Message, int SessionId, string Source, string StackTrace, System.DateTime Time, object userState) {
            if ((this.onBeginLogErrorDelegate == null)) {
                this.onBeginLogErrorDelegate = new BeginOperationDelegate(this.OnBeginLogError);
            }
            if ((this.onEndLogErrorDelegate == null)) {
                this.onEndLogErrorDelegate = new EndOperationDelegate(this.OnEndLogError);
            }
            if ((this.onLogErrorCompletedDelegate == null)) {
                this.onLogErrorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogErrorCompleted);
            }
            base.InvokeAsync(this.onBeginLogErrorDelegate, new object[] {
                        Data,
                        ExceptionType,
                        HelpLink,
                        Message,
                        SessionId,
                        Source,
                        StackTrace,
                        Time}, this.onEndLogErrorDelegate, this.onLogErrorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ErrorCollectClient.ServiceReference.StartedSessionDTO ErrorCollectClient.ServiceReference.IErrorCollectService.StartSession(ErrorCollectClient.ServiceReference.SessionDTO request) {
            return base.Channel.StartSession(request);
        }
        
        public int StartSession(string DeviceId, string Platform, string User) {
            ErrorCollectClient.ServiceReference.SessionDTO inValue = new ErrorCollectClient.ServiceReference.SessionDTO();
            inValue.DeviceId = DeviceId;
            inValue.Platform = Platform;
            inValue.User = User;
            ErrorCollectClient.ServiceReference.StartedSessionDTO retVal = ((ErrorCollectClient.ServiceReference.IErrorCollectService)(this)).StartSession(inValue);
            return retVal.SessionId;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ErrorCollectClient.ServiceReference.IErrorCollectService.BeginStartSession(ErrorCollectClient.ServiceReference.SessionDTO request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartSession(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStartSession(string DeviceId, string Platform, string User, System.AsyncCallback callback, object asyncState) {
            ErrorCollectClient.ServiceReference.SessionDTO inValue = new ErrorCollectClient.ServiceReference.SessionDTO();
            inValue.DeviceId = DeviceId;
            inValue.Platform = Platform;
            inValue.User = User;
            return ((ErrorCollectClient.ServiceReference.IErrorCollectService)(this)).BeginStartSession(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ErrorCollectClient.ServiceReference.StartedSessionDTO ErrorCollectClient.ServiceReference.IErrorCollectService.EndStartSession(System.IAsyncResult result) {
            return base.Channel.EndStartSession(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndStartSession(System.IAsyncResult result) {
            ErrorCollectClient.ServiceReference.StartedSessionDTO retVal = ((ErrorCollectClient.ServiceReference.IErrorCollectService)(this)).EndStartSession(result);
            return retVal.SessionId;
        }
        
        private System.IAsyncResult OnBeginStartSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string DeviceId = ((string)(inValues[0]));
            string Platform = ((string)(inValues[1]));
            string User = ((string)(inValues[2]));
            return this.BeginStartSession(DeviceId, Platform, User, callback, asyncState);
        }
        
        private object[] OnEndStartSession(System.IAsyncResult result) {
            int retVal = this.EndStartSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartSessionCompleted(object state) {
            if ((this.StartSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartSessionCompleted(this, new StartSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartSessionAsync(string DeviceId, string Platform, string User) {
            this.StartSessionAsync(DeviceId, Platform, User, null);
        }
        
        public void StartSessionAsync(string DeviceId, string Platform, string User, object userState) {
            if ((this.onBeginStartSessionDelegate == null)) {
                this.onBeginStartSessionDelegate = new BeginOperationDelegate(this.OnBeginStartSession);
            }
            if ((this.onEndStartSessionDelegate == null)) {
                this.onEndStartSessionDelegate = new EndOperationDelegate(this.OnEndStartSession);
            }
            if ((this.onStartSessionCompletedDelegate == null)) {
                this.onStartSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartSessionCompleted);
            }
            base.InvokeAsync(this.onBeginStartSessionDelegate, new object[] {
                        DeviceId,
                        Platform,
                        User}, this.onEndStartSessionDelegate, this.onStartSessionCompletedDelegate, userState);
        }
    }
}
